### search customers, url format => http://baseURL/namaIndex/_search
GET http://localhost:9200/categories/_search

### search products pagination, url format => http://baseURL/namaIndex/_search?size={totalDataPerPage}&from={startData}
GET http://localhost:9200/customer/_search?size=1&from=0

### search products sort by field, url format => http://baseURL/namaIndex/_search?sort={nameField:sortMethod}
# notes:
# tipe data text tidak bisa di sort, jadi harus diubah dulu ke tipe data keyword
GET http://localhost:9200/customer/_search?sort=email:asc

### search field includes, url format => http://baseURL/namaIndex/_search?_source_includes={fields}
GET http://localhost:9200/customer/_search?_source_includes=first_name,last_name

### search field exclude, url format => http://baseURL/namaIndex/_search?_source_excludes={fields}
GET http://localhost:9200/customer/_search?_source_excludes=hobbies,banks,address

### search customers with query and filter body
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "match_all": {}
    },
    "size": 5,
    "from": 0,
    "sort": [
        {
            "username": {
                "order": "asc"
            }
        }
    ]
}

### search with filter term (term query untuk tipe data keyword)
# notes:
# term query ini case sensitive
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "term": {
            "gender": "Female"
        }
    }
}

### search with filter match
# notes:
# di match query semua value auto lowercase
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "match": {
            "banks.name": "BCa"
        }
    }
}

### search with filter match + operator
# notes: 
# default value operator = "or"
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "match": {
            "banks.name": {
                "query": "bca digital",
                "operator": "and"
            }
        }
    }
}

### search filter where in
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "terms": {
            "username": [
                "username1",
                "username2",
                "username3"
            ]
        }
    }
}

### search with boolean query (must, should, must_not, filter)
# notes: 
# pada boolean query filter dan must kurleb sama, bedanya must melibatkan score
# pada boolean query should ada param minimum_should_match dengan default value = 1
# pada boolean query should jika ada query must / filter, minimum_should_match default value = 0

### must
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "bool" : {
            "must": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                },
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "and"
                        }
                    }
                }
            ]
        }   
    }
}

### must_not
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "bool" : {
            "must_not": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                },
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "and"
                        }
                    }
                }
            ]
        }   
    }
}

### should
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "bool" : {
            "should": [
                {
                    "term": {
                        "banks.name": "mandiri"
                    }
                },
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "and"
                        }
                    }
                }
            ]
        }   
    }
}

### filter (karena tidak melibatkan score, jadi perlu manual sort untuk mendefinisikan urutan datanya)
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "bool" : {
            "filter": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                },
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "and"
                        }
                    }
                }
            ]
        }  
    },
    "sort": [
        {
            "username": {
                "order": "desc"
            }
        }
    ]
}

### contoh multi bool query
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query" : {
        "bool" : {
            "must": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                }
            ],
            "should": [
                {
                    "term": {
                        "banks.name": "mandiri"
                    }
                },
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "and"
                        }
                    }
                }
            ],
            "minimum_should_match": 1
        }   
    }
}

### search customers by flattened field (labels)
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "term": {
            "labels": "regular"
        }
    }
}

###
# note: 
# value dari flattened field, tipe datanya adalah keyword
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "term": {
            "labels.prority": "regular"
        }
    }
}

### nested query
# notes:
# nested query adalah cara terakhir jika tidak ada solusi lain, karena ini memperlambat performa
POST  http://localhost:9200/parents/_search
Content-Type: application/json

{
    "query": {
        "nested": {
            "path": "children",
            "query": {
                "bool": {
                    "must": [
                        {
                            "match": {
                                "children.first_name": "Misyal"
                            }
                        },
                        {
                            "match": {
                                "children.last_name": "Khawarizmi"
                            }
                        }
                    ]
                }
            }
        }
    }
}

### sort by multi field
POST  http://localhost:9200/parents/_search
Content-Type: application/json

{
    "sort": [
        {
            "fullname.fn_keyword": "asc"
        }
    ]
}

### deep search pagination menggunakan search_after (valuenya ambil dari sort value terakhir)
POST http://localhost:9200/categories/_search
Content-Type: application/json

{
    "size": 10,
    "from": 0,
    "sort": [
        {
            "id": {
                "order": "asc"
            }
        }
    ],
    "search_after": [
        "19940"
    ]
}